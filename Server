<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2004Scape Resizable Client</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        /* --- Basic Setup & Theme --- */
        :root {
            --background-color: #121212;
            --container-bg: #1e1e1e;
            --border-color: #333;
            --handle-color: #444;
            --text-color: #e0e0e0;
            --primary-color: #007bff;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden; /* Prevents scrollbars from appearing on the main page */
        }

        body {
            background-color: var(--background-color);
            color: var(--text-color);
            font-family: 'Inter', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            padding: 20px;
            box-sizing: border-box;
        }

        /* --- Main Client Container --- */
        /* This is the resizable window that will hold the game client. */
        #client-container {
            background-color: var(--container-bg);
            border: 2px solid var(--border-color);
            border-radius: 8px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);

            /* CORE RESIZABLE LOGIC */
            resize: both; /* Allows the user to resize horizontally and vertically */
            overflow: hidden; /* IMPORTANT: This makes the resize handle work */
            
            /* Initial size - you can change these values */
            width: 765px;
            height: 503px;
            min-width: 400px;
            min-height: 300px;
            
            display: flex; /* Helps in centering the game canvas */
            flex-direction: column;
        }

        /* --- Game View --- */
        /* This div will contain the <canvas> generated by the TeaVM client */
        #game-view {
            width: 100%;
            height: 100%;
            flex-grow: 1; /* Makes the game view fill the container */
            background-color: #000; /* Black background until canvas loads */
        }

        /* The game client will likely generate a <canvas> element. This style ensures it fills its container. */
        #game-view > canvas {
            display: block; /* Removes any extra space below the canvas */
            width: 100% !important;
            height: 100% !important;
            image-rendering: pixelated; /* Optional: for a sharper, retro look */
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }

        /* --- Helper Text & Instructions --- */
        #instructions {
            margin-top: 20px;
            padding: 10px 15px;
            background: var(--container-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 0.9em;
            text-align: center;
            max-width: 765px;
        }
        
        #instructions code {
            background-color: #000;
            padding: 2px 5px;
            border-radius: 4px;
            font-weight: bold;
        }

    </style>
</head>
<body>

    <!--
      CLIENT CONTAINER
      This is the main element. The user can drag the bottom-right corner to resize it.
      The JavaScript below will detect the size change and inform the game canvas.
    -->
    <div id="client-container">
        <!--
          GAME VIEW
          The TeaVM client's JavaScript should be configured to create its <canvas>
          element inside this div.
        -->
        <div id="game-view"></div>
    </div>

    <div id="instructions">
      <p>Drag the bottom-right corner of the client window to resize it.</p>
      <p>Make sure your TeaVM client's main JavaScript file is named <code>client.js</code> and is in the same folder as this HTML file.</p>
    </div>
    
    <!--
      CLIENT SCRIPT
      IMPORTANT: This is where you include the main JavaScript file generated by TeaVM.
      The GitHub repo suggests the main class is `org.runestar.client.web.App`. TeaVM will compile this
      into a JS file. You may need to rename this file to 'client.js' or update the src path below.
      
      Example: <script src="js/app.js"></script>
    -->
    <script src="client.js"></script>

    <script>
        /**
         * RESIZE HANDLING SCRIPT
         * This script makes the client truly resizable, not just scalable.
         * It watches for size changes on the #client-container and updates the
         * <canvas> element's actual width and height attributes. This is crucial
         * for the game to render correctly at the new resolution.
         */
        document.addEventListener('DOMContentLoaded', () => {
            const clientContainer = document.getElementById('client-container');
            const gameView = document.getElementById('game-view');
            let gameCanvas = null;

            // --- Function to update canvas resolution ---
            const updateCanvasSize = (width, height) => {
                if (!gameCanvas) {
                    // Try to find the canvas if it's not found yet.
                    // TeaVM might take a moment to add it to the DOM.
                    gameCanvas = gameView.querySelector('canvas');
                    if (!gameCanvas) {
                        console.warn("Resize handler: Canvas element not found yet. Will retry.");
                        return; // Exit if canvas isn't there
                    }
                    console.log("Resize handler: Game canvas found and connected.");
                }

                // Update the canvas's drawing surface size.
                // This is different from CSS width/height, which just stretches the image.
                gameCanvas.width = width;
                gameCanvas.height = height;
                
                console.log(`Canvas resized to: ${width}x${height}`);

                // Optional: Dispatch a resize event on the canvas or window, as some
                // game engines might listen for this.
                window.dispatchEvent(new Event('resize'));
            };

            // --- Use ResizeObserver for efficient size tracking ---
            const resizeObserver = new ResizeObserver(entries => {
                for (let entry of entries) {
                    // Use contentRect for precise dimensions inside padding/border
                    const { width, height } = entry.contentRect;
                    updateCanvasSize(Math.round(width), Math.round(height));
                }
            });

            // --- Observe the container and also check for canvas periodically ---
            resizeObserver.observe(clientContainer);
            
            // TeaVM might add the canvas after the page loads.
            // We'll set up a MutationObserver to find the canvas as soon as it's created.
            const mutationObserver = new MutationObserver((mutations) => {
                for (let mutation of mutations) {
                    if (mutation.addedNodes.length) {
                        const canvasElement = gameView.querySelector('canvas');
                        if (canvasElement) {
                            gameCanvas = canvasElement;
                            console.log("Canvas element was added to the DOM.");
                            // Perform initial resize
                            const { width, height } = clientContainer.getBoundingClientRect();
                            updateCanvasSize(Math.round(width), Math.round(height));
                            // We found it, so we can stop observing mutations.
                            mutationObserver.disconnect();
                            break;
                        }
                    }
                }
            });

            // Start observing the game-view for when the canvas is added.
            mutationObserver.observe(gameView, { childList: true });

            // Set initial size on load as a fallback
            const initialRect = clientContainer.getBoundingClientRect();
            updateCanvasSize(Math.round(initialRect.width), Math.round(initialRect.height));
        });

    </script>
</body>
</html>
